This sorting project involves testing various sorting algorithms experimentally to determine their real-world running times. In particular, you will need to implement each of the following sorting algorithms:

Bubble-sort
Insertion-sort
Spin-the-bottle sort
Two implementations of Shellsort (using two different gap sequences)
Two implementations of Annealing sort (using two different temperature-repetition sequences)

For each implementation, you need to perform runtime experiments on random permutations, with multiple runs for each problem size, for increasing problem sizes. Specifically, you need to do a set of experiments for each of the following distributions:

Uniformly distributed permutations, that is, permutations of the numbers, 1,2,3,...,n, where all permutations are equally likely.
Almost-sorted permutations. These are generated by starting with a sorted array/vector of n numbers, say, the numbers 1,2,3,...,n, in this order. Then, independently choose 2log n pairs, (i,j), where i and j are uniformly-chosen random integers in the range from 0 to n-1, and swap the numbers at positions i and j in the array/vector.
You must plot the results on a log-log scale (with uniformly distrubted permuations on one plot and almost-sorted permutations on another) to empirically determine the algorithm's asymptotic running time for each type of distribution. You then need to rank all your sorting implementations from asymptotically slowest to fastest based on your experimental results.

In addition, for Shellsort and Annealing sort, you need to test two different sets of parameters that are used by the algorithm, comparing the two to see which one is best. You should experiment with several different parameter sets, so that the final two you use are the two best among many. You should strive to find parameter sets so that one of your Shellsort or Annealing sort implementations is the fastest among all the sorting algorithms you test.